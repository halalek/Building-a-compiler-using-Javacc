/* Generated By:JavaCC: Do not edit this line. MyNewGrammarConstants.java */
package cmppp;


/** 
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface MyNewGrammarConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int NUMBER = 9;
  /** RegularExpression Id. */
  int NUMBERINT = 10;
  /** RegularExpression Id. */
  int Assignment = 11;
  /** RegularExpression Id. */
  int Semicolon = 12;
  /** RegularExpression Id. */
  int IF = 13;
  /** RegularExpression Id. */
  int ELSE = 14;
  /** RegularExpression Id. */
  int IFELSE = 15;
  /** RegularExpression Id. */
  int FOR = 16;
  /** RegularExpression Id. */
  int WHILE = 17;
  /** RegularExpression Id. */
  int DO = 18;
  /** RegularExpression Id. */
  int SWITCH = 19;
  /** RegularExpression Id. */
  int BREAK = 20;
  /** RegularExpression Id. */
  int CONTINUE = 21;
  /** RegularExpression Id. */
  int CASE = 22;
  /** RegularExpression Id. */
  int DEFULT = 23;
  /** RegularExpression Id. */
  int INT = 24;
  /** RegularExpression Id. */
  int BOOL = 25;
  /** RegularExpression Id. */
  int FLOAT = 26;
  /** RegularExpression Id. */
  int DOUBLE = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int CHAR = 29;
  /** RegularExpression Id. */
  int LeftParenthesis = 30;
  /** RegularExpression Id. */
  int RightParenthesis = 31;
  /** RegularExpression Id. */
  int LeftBrace = 32;
  /** RegularExpression Id. */
  int RightBrace = 33;
  /** RegularExpression Id. */
  int InputEnd = 34;
  /** RegularExpression Id. */
  int Compare = 35;
  /** RegularExpression Id. */
  int ANDOR = 36;
  /** RegularExpression Id. */
  int NOT = 37;
  /** RegularExpression Id. */
  int AND = 38;
  /** RegularExpression Id. */
  int OR = 39;
  /** RegularExpression Id. */
  int READ = 40;
  /** RegularExpression Id. */
  int WRITE = 41;
  /** RegularExpression Id. */
  int TRUE = 42;
  /** RegularExpression Id. */
  int FALSE = 43;
  /** RegularExpression Id. */
  int FUNC = 44;
  /** RegularExpression Id. */
  int STRINGValue = 45;
  /** RegularExpression Id. */
  int Id = 46;
  /** RegularExpression Id. */
  int Cout = 47;
  /** RegularExpression Id. */
  int Cin = 48;
  /** RegularExpression Id. */
  int st = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<NUMBER>",
    "<NUMBERINT>",
    "\":=\"",
    "\";\"",
    "\"if\"",
    "\"else\"",
    "\"else if\"",
    "\"for\"",
    "\"while\"",
    "\"do\"",
    "\"switch\"",
    "\"break\"",
    "\"continue\"",
    "\"case\"",
    "\"default\"",
    "\"int\"",
    "\"bool\"",
    "\"float\"",
    "\"double\"",
    "\"string\"",
    "\"char\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"end\"",
    "<Compare>",
    "<ANDOR>",
    "\"!\"",
    "\"&&\"",
    "\"||\"",
    "\"read\"",
    "\"write\"",
    "\"true\"",
    "\"false\"",
    "\"func\"",
    "<STRINGValue>",
    "<Id>",
    "\"cout<<\"",
    "\"cin>>\"",
    "<st>",
    "\":\"",
    "\",\"",
  };

}
